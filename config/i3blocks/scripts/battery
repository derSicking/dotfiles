#!/usr/bin/env node

require("child_process").exec("acpi -abi", (_error, stdout, _stderr) => {
  const batteryLines = {};
  stdout
    .split("\n")
    .filter((line) => !!line?.trim())
    .map((line) => {
      const split = line.match(/(.*?):(.*$)/);
      const name = split?.[1];
      if (!name) return;
      if (batteryLines[name]) {
        batteryLines[name].push(split[2].trim());
      } else {
        batteryLines[name] = [split[2].trim()];
      }
    });

  let isPluggedIn = false;

  Object.keys(batteryLines)
    .filter((key) => key.startsWith("Adapter "))
    .forEach((key) => {
      batteryLines[key].forEach((line) => {
        if (line.includes("on-line")) isPluggedIn = true;
      });
    });

  const batteries = {};

  Object.keys(batteryLines)
    .filter((key) => key.startsWith("Battery "))
    .map((key) => {
      return {
        key,
        line: batteryLines[key].filter((line) =>
          line.includes("capacity"),
        )?.[0],
      };
    })
    .map(({ key, line }) => {
      return {
        key,
        capacity: Number(
          line.match(/.*?last full capacity ([0-9]*) mAh.*?/)?.[1],
        ),
      };
    })
    .forEach(({ key, capacity }) => {
      batteries[key] = { capacity };
    });

  Object.keys(batteryLines)
    .filter((key) => key.startsWith("Battery "))
    .map((key) => {
      return {
        key,
        line: batteryLines[key].filter(
          (line) => !line.includes("capacity"),
        )?.[0],
      };
    })
    .map(({ key, line }) => {
      return {
        key,
        percent: Number(line.match(/.*?([0-9]{1,3})%.*/)?.[1]) / 100,
      };
    })
    .forEach(({ key, percent }) => {
      batteries[key].percent = percent;
    });

  Object.keys(batteryLines)
    .filter((key) => key.startsWith("Battery "))
    .map((key) => {
      return {
        key,
        isCharging: !batteryLines[key].some(
          (line) =>
            line.includes("Not charging") ||
            line.includes(" charging at zero") ||
            line.includes("Full") ||
            line.includes("Discharging"),
        ),
      };
    })
    .forEach(({ key, isCharging }) => {
      batteries[key].isCharging = isCharging;
    });

  Object.keys(batteryLines)
    .filter((key) => key.startsWith("Battery "))
    .map((key) => {
      return {
        key,
        line: batteryLines[key].filter((line) =>
          line.startsWith("Discharging"),
        )?.[0],
      };
    })
    .filter(({ line }) => !!line)
    .map(({ key, line }) => {
      const seconds = line
        .match(/.*?([0-9]{2}:)?([0-9]{2}:)?([0-9]{2}) remaining$/)
        ?.slice(1)
        .map((str) => Number(str.replace(":", "")))
        .reverse()
        .reduce((sum, value, index) => {
          return sum + 60 ** index * value;
        }, 0);
      return {
        key,
        seconds,
      };
    })
    .forEach(({ key, seconds }) => {
      batteries[key].seconds = seconds;
    });

  const mAps = Object.keys(batteries)
    .map((key) => batteries[key])
    .filter((battery) => !!battery.seconds)
    .map(({ capacity, seconds }) => {
      return capacity / seconds;
    })
    .reduce((avg, value, _index, { length }) => {
      return avg + value / length;
    }, 0);

  const mAcurrentTotal = Object.keys(batteries)
    .map((key) => batteries[key])
    .map((battery) => {
      return battery.capacity * battery.percent;
    })
    .reduce((sum, value) => {
      return sum + value;
    }, 0);

  const mAfullTotal = Object.keys(batteries)
    .map((key) => batteries[key])
    .map((battery) => {
      return battery.capacity;
    })
    .reduce((sum, value) => {
      return sum + value;
    }, 0);

  const totalPercentage = mAcurrentTotal / mAfullTotal;
  const totalSecsRemaining = Math.floor(mAcurrentTotal / mAps);

  const dateStr = Number.isFinite(totalSecsRemaining)
    ? new Date(totalSecsRemaining * 1000).toISOString()
    : "";
  const timeRemainingStr = dateStr
    ? totalSecsRemaining < 3600
      ? dateStr.substring(14, 19)
      : dateStr.substring(11, 19)
    : "";

  const percentStr = Number(totalPercentage * 100).toFixed(0);

  let batteryIcon =
    totalPercentage > 0.8
      ? "\uf240"
      : totalPercentage > 0.6
        ? "\uf241"
        : totalPercentage > 0.3
          ? "\uf242"
          : totalPercentage > 0.1
            ? "\uf243"
            : "\uf244";

  batteryIcon = `<span size='15pt' rise='-2pt'>${batteryIcon}</span>`;
  if (totalPercentage < 0.1) {
    batteryIcon = `<span foreground='red'>${batteryIcon}</span>`;
  } else if (totalPercentage < 0.2) {
    batteryIcon = `<span foreground='yellow'>${batteryIcon}</span>`;
  }

  const plugIcon = "<span size='14pt' rise='-1pt'>\uf1e6</span>";

  const isCharging = Object.keys(batteries)
    .map((key) => batteries[key])
    .some((bat) => bat.isCharging);

  if (isPluggedIn && !isCharging) {
    console.log(` ${plugIcon} `);
  } else if (isPluggedIn && isCharging) {
    console.log(` ${batteryIcon} ${percentStr}% ${plugIcon} `);
  } else if (!timeRemainingStr) {
    console.log(
      ` ${batteryIcon} ${percentStr}%<span letter_spacing='-10000'> </span>`,
    );
  } else {
    console.log(
      ` ${batteryIcon} ${percentStr}% (${timeRemainingStr})<span letter_spacing='-10000'> </span>`,
    );
  }
});
